package net.kukido.sql;

import java.util.*;
import java.sql.*;
import javax.sql.*;

/**
 * This class functions as a wrapper for an internal
 * java.sql.PreparedStatement, mapping named parameters to appropriate
 * numbered parameters.  It parses the given SQL string for parameters
 * of the form :param, and stores their location.
 * */
public class NamedParamStatement implements java.sql.PreparedStatement
{
    private Connection conn;
    private PreparedStatement preparedStatement;
    private List paramLocations; // vectors are indexed; SQL params are numbered!
    private List unboundParameters;
    private Map paramBindings; // name --> value
    private String sql;

    public NamedParamStatement(Connection conn, String sql)
	throws SQLException
    {
	this.conn = conn;
	paramLocations = new ArrayList();
	
	StringBuffer buf = new StringBuffer(sql);
	for (int i = 0; i < buf.length(); i++)
	{
	    if (':' == buf.charAt(i))
	    {
		buf.deleteCharAt(i); // Delete the colon.
		StringBuffer paramName = new StringBuffer();
		while (i < buf.length() && (Character.isLetter(buf.charAt(i)) || Character.isDigit(buf.charAt(i)) || '_' == buf.charAt(i)))
		{
		    paramName.append(buf.charAt(i));
		    buf.deleteCharAt(i);
		}
		buf.insert(i, '?');
		paramLocations.add(paramName.toString());
	    }
	}

	this.sql = buf.toString();
        this.unboundParameters = new ArrayList(this.paramLocations);
	this.preparedStatement = conn.prepareStatement(this.sql);
    }

    /**
     * THIS METHOD ASSUMES THAT ITS RETURN VALUE WILL BE USED
     * IMMEDIATELY TO BIND A PARAMETER!  DO NOT CALL THIS FROM
     * ANYWHERE BESIDES THE setXXX() METHODS!  YARRRR!
     **/
    private int getParamIndex(String paramName) throws SQLException
    {
	if (paramLocations.contains(paramName)) {
            unboundParameters.remove(paramName);
	    return paramLocations.indexOf(paramName) + 1;
        }
	else {
	    throw new SQLException("Index not found for parameter " + paramName);
        }
    }

    /**
     * Attempts to bind all the name-->value mappings in parameterMap.
     * This is here mainly for the convenience of being able to pass
     * in the result of ServletRequest.getParameterMap().  Beware
     * nasty bugs!  With convenience like this come sneaky gremlins!
     */
    public void bindAll(Map parameterMap) throws SQLException
    {
        for (Iterator itr = parameterMap.keySet().iterator(); itr.hasNext(); )
        {
            String paramName = (String)itr.next();
            Object paramValue = parameterMap.get(paramName);
            setObject(paramName, paramValue);
        }
    }
    
    public void addBatch() throws SQLException {
        preparedStatement.addBatch();
    }
    
    public void addBatch(String sql) throws SQLException {
        preparedStatement.addBatch(sql);
    }
    
    public void cancel() throws SQLException {
        preparedStatement.cancel();
    }
    
    public void clearBatch() throws SQLException {
	paramBindings.clear();
        preparedStatement.clearBatch();
    }
    
    public void clearParameters() throws SQLException {
	preparedStatement.clearParameters();
    }
    
    public void clearWarnings() throws SQLException {
	preparedStatement.clearWarnings();
    }
    
    public void close() throws SQLException {
	preparedStatement.close();
    }
    
    public boolean execute() throws SQLException {
	return preparedStatement.execute();
    }
    
    public boolean execute(String sql) throws SQLException {
	return preparedStatement.execute(sql);
    }
    
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
	return preparedStatement.execute(sql, autoGeneratedKeys);
    }
    
    public boolean execute(String sql, String[] columnNames) throws SQLException {
	return preparedStatement.execute(sql, columnNames);
    }
    
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
	return preparedStatement.execute(sql, columnIndexes);
    }
    
    public int[] executeBatch() throws SQLException {
	return preparedStatement.executeBatch();
    }
    
    public ResultSet executeQuery() throws SQLException {
	return preparedStatement.executeQuery();
    }
    
    public ResultSet executeQuery(String sql) throws SQLException {
	return preparedStatement.executeQuery();
    }
    
    public int executeUpdate() throws SQLException {
	return preparedStatement.executeUpdate();
    }
    
    public int executeUpdate(String sql) throws SQLException {
	return preparedStatement.executeUpdate(sql);
    }
    
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
	return preparedStatement.executeUpdate(sql, autoGeneratedKeys);
    }
    
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
	return preparedStatement.executeUpdate(sql, columnNames);
    }
    
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
	return preparedStatement.executeUpdate(sql, columnIndexes);
    }
    
    public Connection getConnection() throws SQLException {
	return preparedStatement.getConnection();
    }
    
    public int getFetchDirection() throws SQLException {
	return preparedStatement.getFetchDirection();
    }
    
    public int getFetchSize() throws SQLException {
	return preparedStatement.getFetchSize();
    }
    
    public ResultSet getGeneratedKeys() throws SQLException {
	return preparedStatement.getGeneratedKeys();
    }
    
    public int getMaxFieldSize() throws SQLException {
	return preparedStatement.getMaxFieldSize();
    }
    
    public int getMaxRows() throws SQLException {
	return preparedStatement.getMaxRows();
    }
    
    public ResultSetMetaData getMetaData() throws SQLException {
	return preparedStatement.getMetaData();
    }
    
    public boolean getMoreResults() throws SQLException {
	return preparedStatement.getMoreResults();
    }
    
    public boolean getMoreResults(int current) throws SQLException {
	return preparedStatement.getMoreResults(current);
    }
    
    public ParameterMetaData getParameterMetaData() throws SQLException {
	return preparedStatement.getParameterMetaData();
    }
    
    public int getQueryTimeout() throws SQLException {
	return preparedStatement.getQueryTimeout();
    }
    
    public ResultSet getResultSet() throws SQLException {
	return preparedStatement.getResultSet();
    }
    
    public int getResultSetConcurrency() throws SQLException {
	return preparedStatement.getResultSetConcurrency();
    }
    
    public int getResultSetHoldability() throws SQLException {
	return preparedStatement.getResultSetHoldability();
    }
    
    public int getResultSetType() throws SQLException {
	return preparedStatement.getResultSetType();
    }
    
    public int getUpdateCount() throws SQLException {
	return preparedStatement.getUpdateCount();
    }
    
    public SQLWarning getWarnings() throws SQLException {
	return preparedStatement.getWarnings();
    }
    
    public void setArray(int i, Array x) throws SQLException {
	preparedStatement.setArray(i, x);
    }

    public void setArray(String paramName, Array x) throws SQLException {
	preparedStatement.setArray(getParamIndex(paramName), x);
    }
    
    public void setAsciiStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
	preparedStatement.setAsciiStream(parameterIndex, x, length);
    }
    
    public void setAsciiStream(String paramName, java.io.InputStream x, int length) throws SQLException {
	preparedStatement.setAsciiStream(getParamIndex(paramName), x, length);
    }

    public void setBigDecimal(int parameterIndex, java.math.BigDecimal x) throws SQLException {
	preparedStatement.setBigDecimal(parameterIndex, x);
    }

    public void setBigDecimal(String paramName, java.math.BigDecimal x) throws SQLException {
	preparedStatement.setBigDecimal(getParamIndex(paramName), x);
    }
    
    public void setBinaryStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
	preparedStatement.setBinaryStream(parameterIndex, x, length);
    }

    public void setBinaryStream(String paramName, java.io.InputStream x, int length) throws SQLException {
	preparedStatement.setBinaryStream(getParamIndex(paramName), x, length);
    }
    
    public void setBlob(int i, Blob x) throws SQLException {
	preparedStatement.setBlob(i, x);
    }

    public void setBlob(String paramName, Blob x) throws SQLException {
	preparedStatement.setBlob(getParamIndex(paramName), x);
    }

    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
	preparedStatement.setBoolean(parameterIndex, x);
    }

    public void setBoolean(String paramName, boolean x) throws SQLException {
	preparedStatement.setBoolean(getParamIndex(paramName), x);
    }
    
    public void setByte(int parameterIndex, byte x) throws SQLException {
	preparedStatement.setByte(parameterIndex, x);
    }

    public void setByte(String paramName, byte x) throws SQLException {
	preparedStatement.setByte(getParamIndex(paramName), x);
    }
    
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
	preparedStatement.setBytes(parameterIndex, x);
    }

    public void setBytes(String paramName, byte[] x) throws SQLException {
	preparedStatement.setBytes(getParamIndex(paramName), x);
    }
    
    public void setCharacterStream(int parameterIndex, java.io.Reader reader, int length) throws SQLException {
	preparedStatement.setCharacterStream(parameterIndex, reader, length);
    }

    public void setCharacterStream(String paramName, java.io.Reader reader, int length) throws SQLException {
	preparedStatement.setCharacterStream(getParamIndex(paramName), reader, length);
    }
    
    public void setClob(int i, Clob x) throws SQLException {
	preparedStatement.setClob(i, x);
    }

    public void setClob(String paramName, Clob x) throws SQLException {
	preparedStatement.setClob(getParamIndex(paramName), x);
    }
    
    public void setCursorName(String name) throws SQLException {
	preparedStatement.setCursorName(name);
    }

    public void setDate(int parameterIndex, java.sql.Date x) throws SQLException {
	preparedStatement.setDate(parameterIndex, x);
    }

    public void setDate(String paramName, java.sql.Date x) throws SQLException {
	preparedStatement.setDate(getParamIndex(paramName), x);
    }
    
    public void setDate(int parameterIndex, java.sql.Date x, Calendar cal) throws SQLException {
	preparedStatement.setDate(parameterIndex, x, cal);
    }

    public void setDate(String paramName, java.sql.Date x, Calendar cal) throws SQLException {
	preparedStatement.setDate(getParamIndex(paramName), x, cal);
    }
    
    
    
    /**
     * Overloaded setDate to deal with java.util.Date
     */
    public void setDate(int parameterIndex, java.util.Date x) throws SQLException {
	preparedStatement.setDate(parameterIndex, convertToDate(x));
    }
    
    /**
     * Overloaded setDate to deal with java.util.Date
     */
    public void setDate(String paramName, java.util.Date x) throws SQLException {
	preparedStatement.setDate(getParamIndex(paramName), convertToDate(x));
    }
        
    /**
     * Overloaded setDate to deal with java.util.Date
     */
    public void setDate(int parameterIndex, java.util.Date x, Calendar cal) throws SQLException {
	preparedStatement.setDate(parameterIndex, convertToDate(x), cal);
    }
    
    /**
     * Overloaded setDate to deal with java.util.Date
     */
    public void setDate(String paramName, java.util.Date x, Calendar cal) throws SQLException {
	preparedStatement.setDate(getParamIndex(paramName), convertToDate(x), cal);
    }
    
    /**
     * Private convenience method in support of accepting java.util.Date
     * parameters.
     *
     * @return null if argument is null, otherwise returns a java.sql.Date
     */
    private java.sql.Date convertToDate(java.util.Date d) {
        return (d == null)
            ? null
            : new java.sql.Date(d.getTime());
    }
    

    
    
    
    public void setDouble(int parameterIndex, double x) throws SQLException {
	preparedStatement.setDouble(parameterIndex, x);
    }

    public void setDouble(String paramName, double x) throws SQLException {
	preparedStatement.setDouble(getParamIndex(paramName), x);
    }	
    
    public void setEscapeProcessing(boolean enable) throws SQLException {
	preparedStatement.setEscapeProcessing(enable);
    }
    
    public void setFetchDirection(int direction) throws SQLException {
	preparedStatement.setFetchDirection(direction);
    }
    
    public void setFetchSize(int rows) throws SQLException {
	preparedStatement.setFetchSize(rows);
    }
    
    public void setFloat(int parameterIndex, float x) throws SQLException {
	preparedStatement.setFloat(parameterIndex, x);
    }
    
    public void setFloat(String paramName, float x) throws SQLException {
	preparedStatement.setFloat(getParamIndex(paramName), x);
    }
    
    public void setInt(int parameterIndex, int x) throws SQLException {
	preparedStatement.setInt(parameterIndex, x);
    }

    public void setInt(String paramName, int x) throws SQLException {
	preparedStatement.setInt(getParamIndex(paramName), x);
    }
    
    public void setLong(int parameterIndex, long x) throws SQLException {
	preparedStatement.setLong(parameterIndex, x);
    }

    public void setLong(String paramName, long x) throws SQLException {
	preparedStatement.setLong(getParamIndex(paramName), x);
    }
    
    public void setMaxFieldSize(int max) throws SQLException {
	preparedStatement.setMaxFieldSize(max);
    }

    public void setMaxRows(int max) throws SQLException {
	preparedStatement.setMaxRows(max);
    }
    
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
	preparedStatement.setNull(parameterIndex, sqlType);
    }

    public void setNull(String paramName, int sqlType) throws SQLException {
	preparedStatement.setNull(getParamIndex(paramName), sqlType);
    }
    
    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
	preparedStatement.setNull(paramIndex, sqlType, typeName);
    }

    public void setNull(String paramName, int sqlType, String typeName) throws SQLException {
	preparedStatement.setNull(getParamIndex(paramName), sqlType, typeName);
    }
    
    public void setObject(int parameterIndex, Object x) throws SQLException {
	preparedStatement.setObject(parameterIndex, x);
    }

    public void setObject(String paramName, Object x) throws SQLException {
	preparedStatement.setObject(getParamIndex(paramName), x);
    }
    
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
	preparedStatement.setObject(parameterIndex, x, targetSqlType);
    }

    public void setObject(String paramName, Object x, int targetSqlType) throws SQLException {
	preparedStatement.setObject(getParamIndex(paramName), x, targetSqlType);
    }
    
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
	preparedStatement.setObject(parameterIndex, x, targetSqlType, scale);
    }

    public void setObject(String paramName, Object x, int targetSqlType, int scale) throws SQLException {
	preparedStatement.setObject(getParamIndex(paramName), x, targetSqlType, scale);
    }
    
    public void setQueryTimeout(int seconds) throws SQLException {
	preparedStatement.setQueryTimeout(seconds);
    }
    
    public void setRef(int i, Ref x) throws SQLException {
	preparedStatement.setRef(i, x);
    }

    public void setRef(String paramName, Ref x) throws SQLException {
	preparedStatement.setRef(getParamIndex(paramName), x);
    }	
    
    public void setShort(int parameterIndex, short x) throws SQLException {
	preparedStatement.setShort(parameterIndex, x);
    }

    public void setShort(String paramName, short x) throws SQLException {
	preparedStatement.setShort(getParamIndex(paramName), x);
    }
    
    public void setString(int parameterIndex, String x) throws SQLException {
        x = "".equals(x) ? null : x;
	preparedStatement.setString(parameterIndex, x);
    }

    public void setString(String paramName, String x) throws SQLException {
        x = "".equals(x) ? null : x;
	preparedStatement.setString(getParamIndex(paramName), x);
    }
    
    public void setTime(int parameterIndex, java.sql.Time x) throws SQLException {
	preparedStatement.setTime(parameterIndex, x);
    }

    public void setTime(String paramName, java.sql.Time x) throws SQLException {
	preparedStatement.setTime(getParamIndex(paramName), x);
    }
    
    public void setTime(int parameterIndex, java.sql.Time x, Calendar cal) throws SQLException {
	preparedStatement.setTime(parameterIndex, x, cal);
    }

    public void setTime(String paramName, java.sql.Time x, Calendar cal) throws SQLException {
	preparedStatement.setTime(getParamIndex(paramName), x, cal);
    }
    
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException {
	preparedStatement.setTimestamp(parameterIndex, x);
    }

    public void setTimestamp(String paramName, java.sql.Timestamp x) throws SQLException {
	preparedStatement.setTimestamp(getParamIndex(paramName), x);
    }
    
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal) throws SQLException {
	preparedStatement.setTimestamp(parameterIndex, x, cal);
    }

    public void setTimestamp(String paramName, java.sql.Timestamp x, Calendar cal) throws SQLException {
	preparedStatement.setTimestamp(getParamIndex(paramName), x, cal);
    }
    
    
    
    /**
     * Convenience methods for dealing with java.util.Date
     */
    public void setTimestamp(int parameterIndex, java.util.Date x) throws SQLException {
	preparedStatement.setTimestamp(parameterIndex, convertToTimestamp(x));
    }

    public void setTimestamp(String paramName, java.util.Date x) throws SQLException {
	preparedStatement.setTimestamp(getParamIndex(paramName), convertToTimestamp(x));
    }
    
    public void setTimestamp(int parameterIndex, java.util.Date x, Calendar cal) throws SQLException {
	preparedStatement.setTimestamp(parameterIndex, convertToTimestamp(x), cal);
    }

    public void setTimestamp(String paramName, java.util.Date x, Calendar cal) throws SQLException {
	preparedStatement.setTimestamp(getParamIndex(paramName), convertToTimestamp(x), cal);
    }    
    
    private Timestamp convertToTimestamp(java.util.Date date) {
        return (date == null)
            ? null
            : new Timestamp(date.getTime());
    }
    
    
    public void setURL(int parameterIndex, java.net.URL x) throws SQLException {
	preparedStatement.setURL(parameterIndex, x);
    }

    public void setURL(String paramName, java.net.URL x) throws SQLException {
	preparedStatement.setURL(getParamIndex(paramName), x);
    }
    
    public void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length) throws SQLException {
	preparedStatement.setUnicodeStream(parameterIndex, x, length);
    }

    public void setUnicodeStream(String paramName, java.io.InputStream x, int length) throws SQLException {
	preparedStatement.setUnicodeStream(getParamIndex(paramName), x, length);
    }    
}
