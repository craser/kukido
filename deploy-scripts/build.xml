<project basedir="." name="KukidoBlog">

	<property file="build.properties" />
	
	<path id="ant.classpath">
		<fileset dir="${ant.lib.dir}" includes="**/*.jar" />
	</path>

	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="ant.classpath" />
	<taskdef classpathref="ant.classpath" resource="tasks.properties" />
	
	<path id="project.class.path">
		<fileset dir="${local.lib.dir}" includes="**/*.jar" />
		<fileset dir="${local.j2ee.lib.dir}" includes="**/*.jar" />
	</path>
	
	<path id="cobertura.class.path">
	</path>
	
	<target name="deploy-prod" depends="build-war">
		<input addproperty="prod.pass" message="Enter password for ${prod.user}@${prod.host}:" /> 
		<echo message="Deploying WAR file to production server." />
		<echo message="    host: ${prod.host}" />
		<echo message="    user: ${prod.user}" />
		<echo message="    dir : ${prod.war.dir}" />
		<ftp server="${prod.host}" 
			userid="${prod.user}" 
			password="${prod.pass}" 
			action="put"
			remotedir="${prod.war.dir}"
			verbose="true"
			>
			<fileset dir="${local.build.dir}">
				<include name="${local.war.file}" />
			</fileset>
		</ftp>
	</target>
	
	<target name="local-resin-start">
		<echo message="(Re)starting local Resin instance." />
		<exec executable="${resin.bin.dir}/httpd.sh">
			<arg value="restart" />
		</exec>
	</target>
	
	<target name="local-resin-debug">
		<echo message="(Re)starting local Resin instance." />
		<exec executable="${resin.bin.dir}/httpd.sh">
			<arg value="-Xdebug" />
			<arg value="-Xrunjdwp:transport=dt_socket,address=9080,server=y,suspend=n" />
		</exec>
	</target>
	
	
	<target name="local-resin-stop">
		<echo message="Stopping local Resin instance." />
		<exec executable="${resin.bin.dir}/httpd.sh">
			<arg value="stop" />
		</exec>
	</target>
	
	
	<target name="deploy-test" depends="build-test-war, local-resin-stop">
		<echo message="Deploying WAR file to test server." />
		<echo message="    dir: ${resin.deploy.dir}" />
		<echo message="    Deleting ALL contents of ${resin.deploy.dir}" />
		<delete>
			<fileset dir="${resin.deploy.dir}">
				<include name="**" />
			</fileset>
		</delete>
		<echo message="    Copying WAR file: ${local.war.file}" />
		<copy todir="${resin.deploy.dir}">
			<fileset dir="${local.build.dir}">
				<include name="${local.war.file}" />
			</fileset>
	 	</copy>
	</target>
	
	<target name="coverage-report" depends="jar-coverage, test-java">
		<echo message="Generating test coverage report in ${local.coverage.dir}" />
		<cobertura-report format="html" destdir="${local.coverage.dir}" srcdir="${local.src.dir}">
			<fileset file="${local.build.dir}/${kukido.jar.file}" />
		</cobertura-report>
		<echo message="Report: ${local.coverage.dir}/index.html" />
	</target>
	
	<target name="test-java" depends="jar-kukido">
		<junit showoutput="true" haltonerror="false" haltonfailure="true" fork="true">
			<classpath path="${local.build.dir}/${kukido.jar.file}" />
			<classpath refid="project.class.path" />
			<classpath refid="ant.classpath" />
			<!-- classpath location="${local.classes.dir}" / -->
			<batchtest>
				<formatter type="plain" usefile="false" />
				<fileset dir="${local.src.dir}" includes="**/*Test.java" />
			</batchtest>
		</junit>
	</target>
	
	<target name="jar-coverage" depends="jar-kukido">
		<cobertura-instrument todir="${local.test.dir}">
			<classpath refid="project.class.path" />
			<fileset file="${local.build.dir}/${kukido.jar.file}" />
		</cobertura-instrument>
		<delete>
			<fileset dir="${local.build.dir}">
				<include name="${kukido.jar.file}" />
			</fileset>
		</delete>
		<copy file="${local.test.dir}/${kukido.jar.file}" tofile="${local.build.dir}/${kukido.jar.file}" />
	</target>

	<target name="test-tag-build" depends="init-tag-name">
		<echo message="Tagging build: test-${svn.tag.name}" />
		<svn>
			<wcversion
				path="${svn.work.dir}"
			/>
			<copy srcPath="${svn.work.dir}" 
				destUrl="${svn.tags.url}/test-${svn.tag.name}"
				message="Testing the automated tagging system."
			/>
		</svn>
		<echo message="Repository URL: ${repository.url}" />
	</target>
	
	<target name="tag-build" depends="init-tag-name">
		<echo message="Tagging build: ${svn.tag.name}" />
		<svn>
			<wcversion
				path="${svn.work.dir}"
			/>
			<copy srcPath="${svn.work.dir}" 
				destUrl="${svn.tags.url}/${svn.tag.name}"
				message="Automated tagging upon deployment to production."
			/>
		</svn>
		<echo message="Repository URL: ${repository.url}" />
	</target>
	
	<target name="init-tag-name">
		<tstamp>
			<format property="timestamp" pattern="yyyy.MM.dd-HH.mm.ss" />
		</tstamp>
		<property name="svn.tag.name" value="Production-Build-${timestamp}" />
		<echo message="Tag name: ${svn.tag.name}" />
	</target>
	
	<target name="build-war" depends="build-war-template">
		<war destfile="${local.build.dir}/${local.war.file}">
			<fileset dir="${local.war.template}" />
		</war>
	</target>
	
	<target name="build-test-war" depends="build-war-template">
		<delete>
			<fileset dir="${local.war.template}">
			    <include name="**/resin-web.xml"/>
			</fileset>
		</delete>
		<war destfile="${local.build.dir}/${local.war.file}">
			<fileset dir="${local.war.template}" />
		</war>
	</target>	
	
	<target name="build-war-template" depends="jar-kukido, create-database-properties">
		<copy todir="${local.war.template}">
			<fileset dir="${local.web.dir}">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		<copy file="${local.build.dir}/${kukido.jar.file}"
			todir="${local.war.template}/WEB-INF/lib" 
			/>
		<replace file="${local.war.template}/WEB-INF/resin-web.xml" propertyFile="${db.props.file}">
			<replacefilter token="{database.host}" property="database.host" />
			<replacefilter token="{database.user}" property="database.user" />
			<replacefilter token="{database.pass}" property="database.pass" />
	    </replace>
	</target>
	
	<target name="check-database-properties">
		<condition property="database.properties.exists" value="true">
			<available file="${db.props.file}" />
		</condition>
		<echo message="${db.props.file} exists: ${database.properties.exists}" />
	</target>
	
	<target name="create-database-properties" depends="check-database-properties" unless="database.properties.exists">
		<input addproperty="database.host" message="Database host:" />
		<input addproperty="database.user" message="Database user for ${database.host}:" />
		<input addproperty="database.pass" message="Password for database user ${database.user}@${database.host}:" />
		<echo append="false" file="${db.props.file}">database.host=${database.host}
</echo>
		<echo append="true" file="${db.props.file}">database.user=${database.user}
</echo>
		<echo append="true" file="${db.props.file}">database.pass=${database.pass}
</echo>
	</target>
	
	<target name="clear-database-properties">
		<delete file="${db.props.file}" />
	</target>
	
	<target name="jar-kukido" depends="compile-all, create-database-properties">
		<replace file="${local.classes.dir}/net/kukido/blog/config/dmg.properties" propertyFile="${db.props.file}">
			<replacefilter token="{database.host}" property="database.host" />
			<replacefilter token="{database.user}" property="database.user" />
			<replacefilter token="{database.pass}" property="database.pass" />
	    </replace>
		<jar destfile="${local.build.dir}/${kukido.jar.file}">
			<fileset dir="${local.classes.dir}" />
		</jar>
	</target>
	
	<target name="compile-all" depends="clean">
		<javac 
			classpathref="project.class.path"
			srcdir="${local.src.dir}"
			destdir="${local.classes.dir}"
			debug="true">
		</javac>
		<copy todir="${local.classes.dir}">
			<fileset dir="${local.src.dir}" includes="**/*.properties" />
		</copy>
	</target>
	
	<target name="clean">
		<delete dir="${local.build.dir}" />
		<mkdir dir="${local.build.dir}" />
		<mkdir dir="${local.test.dir}" />
		<mkdir dir="${local.classes.dir}" />
		<mkdir dir="${local.coverage.dir}" />
	</target>
</project>